In continuation with this module's homework, your task is to build a form for a user to input data and persist that data into a Car-Collection Database Table Called "user".

You will need to create the following:
Inside of the blueprint folder for "authentication" (assuming the name is "authentication"):
     - 1 routes: One for "signup"
- 1 User Model with the basic infomation listed:
- ID
- First_name
- Last_name
- email
- password
- token
- date_created
- 1 Form with the following information:
- email
- password
- submit_button
- 1 .env file: to add your DATABASE_URL

Note: You may add more to your Form/Model if you would like, but the min is listed above.

So by the end of the homework for tonight you should have:
- A Database Called "car-collection" (Create this inside of Elephant SQL)
- A Database Table called "user"
- A form that can be placed on your HTML for signup
- Data in the user table given to your database by the user form

HINT: You will need to add the following dependencies to your virtual environment
- pip install Flask-WTF
- pip install Flask-Migrate
- pip install psycopg2
- pip install psycopg2-binary -- For those on mac machines
- pip install email-validator -- Verification of emails inside of forms
- pip install python-dotenv

Inside of your car collection api project that you have been working in this week, you will now need to create login functionality with Flask Login.

You will need the following packages for the project:
flask-login (Flask-Login==0.5.0) - pip install Flask-Login
secrets (import secrets)
flask-marshmallow (flask-marshmallow==0.14.0) - pip install flask-marshmallow

By the end of tonight's homework, you should be able to log in and log out via email/password and create CRUD API routes.


While logged in, you should also be able to access your profile page (this should be a protected route, only available for authed users)


Once your are able to login and access your token, you should then be able to create your CRUD operations
CREATE - Car
RETRIEVE - Cars/Car (get all and single drone(s))
UPDATE - Car
DELETE - Car


Also, you will need to create at least one car ðŸš—(possibly two if you are using numeric as a datatype for your Car model) to verify that your API route has a token passed to it.

To finish your API for this week, you will now need to implement CRUD operations for your car collection API. 

By the end you should have:
5 Routes for: Create, Retrieve (2 routes here...GET ALL Cars, GET SINGLE Car), Update, Delete
I should be able to run your app on my machine and use Insomnia to manipulate data in your database.

Note: You may find it easier to create helper functions for handling token verification.

Please also submit your hosted Render app link so I can see the final product. Also, make sure there is data in your database; use your API to put some vehicles in there. This will be part of the grade.